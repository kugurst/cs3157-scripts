# This is a YAML configuration file showing all the keys that the GraderGenerator understands as well as their respective location.
# All directories are relative to the final location of Grader.java unless otherwise noted.

# Specify this key to have the grader generator extract the mbox files for you. All three subkeys are necessary. Directories given here are relative to GraderGenerator.java. By default, it does not.
extract-mbox:
  # The directory to clone from
  clone-from: /home/jae/cs3157-pub/lab1
  # The directory containing all the .mbox files.
  mbox-from: ~/submit/lab1
  # The directory that should contain each students git clone'd and git am'd lab submission
  dest: ~/grading/lab1/submissions

# The number of threads to use. It defaults to (# of logical cores)/2. A maximum and minimum of # of logical cores and 1, respectively, is enforced.
threads: 9999

# Indicates whether to check that the minimum number of git commits have been met. While the backend supports regex checking, the frontend is slow to implement this feature. For now, just indicate a boolean vaule. Defaults to yes
check-git: no

# The part specification. Technically, the GraderGenerator ignores each partN key, and simply assumes that directories are named partN. The numbering is handled internally, as SnakeYAML returns a LinkedHashMap, which maintains the order in which items were processed. Thus:
# part1:...
# part2:...
# part5:...
# Will be processed as:
# part1:...
# part2:...
# part3:...
# I plan to update this later, but it's not really a pending issue
part1:
  # The list of executables to test. Each one supports a variety of options
  names:
    # The name of the executable. It doesn't have to have any options, in which case, running it is equivalent to "valgrind --leak-check=yes ./<executable>"
    - no-arg
    - mylist-test:
        # The maximum time in seconds the process can run. (Mind the spacing!)
        limit: 10
        # The list of arguments to run the program with
        args:
          - hi there
          - hey pal!
        # The input file to pipe to the current process. It is relative to the directory of Grader.java. Cannot be used in combination with an InputGenerator.
        input-file: mdb.in
        # The InputGenerator class to pipe input to (and receive output from) the current process. You have access to a few variables:
        # out and err which are PrintStreams that write to SUMMARY.txt
        # student and partDir which are Files pointing to the current student's root directory and the part directory currently being graded.
        # What you specify in this line is the invocation of a new instance of your InputGenerator, sans "new" and the ending semicolon.
        input-gen: PortInputGenerator(student)
        # Same rules as with input-gen, except this should be an instanceof ArgumentGenerator. If an ArgumentGenerator is specified with a list of arguments, then the arguments generated by arg-gen will be appended to the end of the command string.
        arg-gen: SampleArgumentGenerator()
        # The command to run during the execution of this program. This command receives on its stdin the following:
        # A line starting with "11" to indicate input from the stdout of the process
        # A line starting with "21" to indicate input from the stderr of the process
        # A line consisting of "10" to indicate the end of stdout from the process
        # A line consisting of "20" to indicate the end of stderr from the process
        # This command has the same working directory of the running process, i.e. partDir.
        simul-run: cat
  # Test drivers that run after the completion of all the above commands. They can have the same keys as a command under name.
  test-drivers:
    # The folder, relative to the directory of Grader.java, that contains the specified commands to make build and run.
    - drivers:
      # This key can have all of the options showcased in mylist-test. The make build, test, and make clean commands will have -DRIVER- in front of the student UNI, to indicate that this is a driver program
      - test
  # Each script- is a list of commands to run at a certain point in testing. At the current time, the only supported specification of commands is via a string, which is to say that the command cannot have subkeys. Like:
  # script-before-building:
  #   - ls:
  #       args:
  #         - hi
  #Is not possible at the moment.
  script-before-building:
    - ls
  script-after-building:
    - ls
  script-after-run:
    - ls
  script-after-cleaning:
    - ls

part2:
  names:
    - revecho:
        args:
          - dude world hello
          - friend world hello
          - DUDE, where's my car
          - dude, I dunno
  # You can specify a part dependency if this part depends on another part having been compiled. In this case, the number of the Strings in the dependency list is retrieved, not the actual full name. No plans as of yet to change this behavior.
  dependencies:
    - part1
  # Additional files you want check make clean to verify were deleted. If they exist in the partDir, they will be deleted; additionally, they will cause checkMakeClean to return false (i.e. the clean was not successful), unless their Makefile removes it.
  additional-clean:
    - mylist.h

part3:
  # A command to run without running make or make clean. Can be used in conjunction with the names key. I make no guarantees as to which key will be processed first.
  no-make:
    # This command can have all of the same options as showcased in mylist-test.
    - mdb-lookup-server.sh

